//Mirror of Binary Tree= swap the right and left data contents
void mirrorBinaryTree(BinaryTreeNode<int>* root) {
if(root==NULL){
return;
}
mirrorBinaryTree(root->left);
mirrorBinaryTree(root->right);
swap(root->left,root->right);
}

//Find a node in BT
bool isNodePresent(BinaryTreeNode<int> *root, int x) {
if(root==NULL){
return false;
}
if(root->data==x){
return true;
}
return isNodePresent(root->left,x) or isNodePresent(root->right,x);
}

//Print Nodes Without Sibling
void printNodesWithoutSibling(BinaryTreeNode<int> *root) {
//corner case
if(root==NULL){
return;
}
if(root->left!=NULL && root->right=NULL){
cout<<root->left->data;
}
if(root->right!=NULL && root->left=NULL){
cout<<root->right->data;
}
printNodesWithoutSibling(root->left);
printNodesWithoutSibling(root->right);
}

//Remove leaf Nodes
logic-Leaf nodes which do not have any children
removeLeafNodes(BinaryTreeNode<int> *root) {
if(root==NULL){
		return root;
	}
        if (root->left == NULL && root->right == NULL) {
          return NULL;
        }

     root->left= removeLeafNodes(root->left);
      root->right=  removeLeafNodes(root->right);
		return root;
}

//Symetric Tree- only 1 fxn given(Application of mirror tree)
bool isMirror(BinaryTreeNode<int> *root1,BinaryTreeNode<int> *root2){
    //3 corner cases
    if(root1==NULL && root2==NULL){
        return true;
    }
    if(root1!=NULL && root2==NULL){
        return false;
    }
    if(root1==NULL && root2!=NULL){
        return false;
    }
    return root1->data==root2->data && isMirror(root1->right,root2->left) && isMirror(root1->left,root2->right);
}
bool isSymmetric(BinaryTreeNode<int>* root) {
	return isMirror(root,root);
}
