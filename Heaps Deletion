//Heaps Deletion is a 3 step Algo-
1.Swap the first node with last node
2.Remove the last node
3.Put the root node in correct position

#include<iostream>
using namespace std;
Class heap{
public:
int arr[100];
int size;
}
heap{
arr[0]=-1;
size=0;
}
void insert( int val){
size=size+1;
int index=size;
arr[index]=val;
}
while(index>1){
parent=index/2;
}
if(arr[parent]<arr[index]){
swap(arr[parent],arr[index]);
index=parent;
}
else{
return;
}
}
}
void deletefromheap(){
if(size==0){
cout<<"Nothing to delete"<<endl;
return;
}
}
//step1
arr[i]=arr[size];
//step2
size--;
//step3
while(i<size){
int leftindex=2*i;
int rightindex=2*i+1;
if(leftindex < size && arr[i] < arr[leftindex]){
swap(arr[i],arr[leftindex]);
i=leftindex;
}
}
if(rightindex < size && arr[i] < arr[rightindex}){
swap(arr[i],arr[rightindex]);
i=rightindex;
}
}
else{
return;
}
int main(){
heap h;
h.insert(2);
h.insert(4);
h.insert(9);
h.print;
h.deletefromheap();
return 0;
}
