BINARY TREES=

//level order traversel in tree

void levelOrderTraversal(node* root) {
    queue<node*> q;
    q.push(root);
//separator
    q.push(NULL);

    while(!q.empty()) {
        node* temp = q.front();
        q.pop();
//separator
        if(temp == NULL) { 
            //purana level complete traverse ho chuka hai
            cout << endl;
            if(!q.empty()) { 
                //queue still has some child ndoes
                q.push(NULL);
            }  
        }
        else{
            cout << temp -> data << " ";
            if(temp ->left) {
                q.push(temp ->left);
            }

            if(temp ->right) {
                q.push(temp ->right);
            }
        }
    }
}
//All types of traversal
Inorder=LNR
Preorder=NLR
Postorder=LRN
//
void inorder(node *root){
//base case
if(root==NULL){
return;
}
inorder(root->left);
cout<<root->data<<"";
inorder(root->right);
}

void preorder(node *root){
//base case
if(root==NULL){
return;
}
cout<<root->data<<"";
preorder(root->left);
preorder(root->right);
}

void postorder(node* root) {
    //base case
    if(root == NULL) {
        return ;
    }

    postorder(root->left);
    postorder(root->right);
    cout << root-> data << " ";

}
//For traversal in normal trees no left and right in root direct run a loop to specify the children of root

void printPostOrder(TreeNode<int>* root) {
    //base case
    if(root==NULL){
        return;
    }
    for (int i = 0; i < root->children.size(); i++) {
      printPostOrder(root->children[i]);
    }

    cout << root -> data << " "; 
}

void printPreOrder(TreeNode<int> *root){
//base case
if(root==NULL){
return;
}
cout<<root->data<<"";
for(int i=0;i<root->children.size();i++){
printPreOrder(root->children[i]);
}
}
Vector fxn given example-
void inorder(TreeNode *root,vector<int> &in){
    //base case
    if(root==NULL){
        return;
    }
    //LNR traversal
   inorder(root->left,in);
   in.push_back(root->data);
   inorder(root->right,in);
}


vector<int> getInOrderTraversal(TreeNode *root)
{
  vector<int> in;
  inorder(root,in);
return in;
}


