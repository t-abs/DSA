//level order traversel in tree

void levelOrderTraversal(node* root) {
    queue<node*> q;
    q.push(root);
//separator
    q.push(NULL);

    while(!q.empty()) {
        node* temp = q.front();
        q.pop();
//separator
        if(temp == NULL) { 
            //purana level complete traverse ho chuka hai
            cout << endl;
            if(!q.empty()) { 
                //queue still has some child ndoes
                q.push(NULL);
            }  
        }
        else{
            cout << temp -> data << " ";
            if(temp ->left) {
                q.push(temp ->left);
            }

            if(temp ->right) {
                q.push(temp ->right);
            }
        }
    }
}
//All types of traversal
Inorder=LNR
Preorder=NLR
Postorder=LRN
//
void inorder(node *root){
//base case
if(root==NULL){
return;
}
inorder(root->left);
cout<<root->data<<"";
inorder(root->right);
}

void preorder(node *root){
//base case
if(root==NULL){
return;
}
cout<<root->data<<"";
preorder(root->left);
preorder(root->right);
}

void postorder(node* root) {
    //base case
    if(root == NULL) {
        return ;
    }

    postorder(root->left);
    postorder(root->right);
    cout << root-> data << " ";

}

