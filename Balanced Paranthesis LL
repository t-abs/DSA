
//For a given a string expression containing only round brackets or parentheses, check if they are balanced or not. Brackets are said to be balanced if the bracket which opens last, closes first.
Example:
Expression: (()())
Since all the opening brackets have their corresponding closing brackets, we say it is balanced and hence the output will be, 'true'.
You need to return a boolean value indicating whether the expression is balanced or not.
Note:
The input expression will not contain spaces in between.
Input Format:
The first and the only line of input contains a string expression without any spaces in between.
 Output Format:
The only line of output prints 'true' or 'false'.
//

#include <stack>
bool isBalanced(string str) {
    stack<char> s;
    
	for(int i=0;i<str.length();i++){
if(str[i]=='{' or str[i]=='[' or str[i]=='('){
s.push(str[i);
}
}
    if(s.empty())
            return false;
  char c;
        
        switch(str[i]) {
            case ')' : c = s.top();
                	   s.pop();
                	   if(c == '}' or c == ']')
                         return false;
                	   break;
            case '}' : c = s.top();
                	   s.pop();
                	   if(c == ')' or c == ']')
                         return false;
                	   break;   
                
            case ']' : c = s.top();
                	   s.pop();
                	   if(c == ')' or c == '}')
                         return false;
                	   break;  
        }
    }
 return s.empty();
    
}
    
